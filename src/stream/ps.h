//////////////////////////////////////////////////////////////////////////////////
// 版权所有，2009-2013，北京汉邦高科数字技术有限公司
// 本文件是未公开的，包含了汉邦高科的机密和专利内容
////////////////////////////////////////////////////////////////////////////////
// 文件名： ps.h
// 作者：
// 版本：   1.0
// 日期：   2013-08-15
// 描述：
// 历史记录：
/////////////////////////////////////////////////////////////////////////////////

#ifndef _PS_H
#define _PS_H
//#include "common/ipc_common.h"
#define	MAX_PS_BUF_LEN 	(512*1024)

/////////////////////////////////////////////////////////////////////////////////
// ES流类型
/////////////////////////////////////////////////////////////////////////////////
typedef enum _tagES_FRAME_TYPE
{
	ES_FRAME_P = 0,
	ES_FRAME_I,
	ES_FRAME_AUDIO
}ES_FRAME_TYPE_E;

/////////////////////////////////////////////////////////////////////////////////
// PS帧的信息
/////////////////////////////////////////////////////////////////////////////////
typedef struct _tagPS_FRAME_INFO
{
    HB_U32  framerate;    		  //数据帧率
    HB_U32  vid_frame_number;         //数据帧号
    HB_U32  aud_frame_number;         //数据帧号
    HB_U32  vid_timestamp;         //视频数据时间戳
    HB_U32  aud_timestamp;         //音频数据时间戳
}PS_FRAME_INFO_OBJ, *PS_FRAME_INFO_HANDLE;

/////////////////////////////////////////////////////////////////////////////////
// PS数据缓冲区结构体
/////////////////////////////////////////////////////////////////////////////////
typedef struct _tagPS_DATA
{
	HB_CHAR	 ps_data[MAX_PS_BUF_LEN];		//PS流数据
	HB_S32   ps_data_len;					//PS流数据长度
}PS_DATA_OBJ, *PS_DATA_HANDLE;


////////////////////////////////////////////////////////////////////////////////
// 函数名：ps_init
// 描述：PS流初始化
// 参数：
//  ［IN］ HB_S32 framerate - 视频帧率
// 返回值：
//  	HB_FAILURE - 失败
//		HB_SUCCESS - 成功
// 说明：
////////////////////////////////////////////////////////////////////////////////
HB_S32 ps_init(HB_S32 framerate);


////////////////////////////////////////////////////////////////////////////////
// 函数名：ps_framerate_updata
// 描述：帧率刷新
// 参数：
//  ［IN］ HB_S32 framerate - 视频帧率
// 返回值：
//  	HB_FAILURE - 失败
//		HB_SUCCESS - 成功
// 说明：
////////////////////////////////////////////////////////////////////////////////
HB_S32 ps_framerate_updata(HB_S32 framerate);

////////////////////////////////////////////////////////////////////////////////
// 函数名：ps_process
// 描述：ES流转换为PS流
// 参数：
//  ［IN］ HB_CHAR* p_srcbuf - ES流的地址指针
//   [IN] HB_S32 frame_len - ES流长度
//   [IN] ES_FRAME_TYPE_E frame_type - ES流帧类型
//   [OUT]PS_DATA_HANDLE p_ps_data - 输出PS流的结构体指针
// 返回值：
//  	HB_FAILURE - 失败
//		HB_SUCCESS - 成功
// 说明：
////////////////////////////////////////////////////////////////////////////////
HB_S32 ps_process(HB_CHAR* p_srcbuf, HB_S32 frame_len, ES_FRAME_TYPE_E frame_type, HB_CHAR* p_ps_data, HB_S32* ps_data_len);
#endif
